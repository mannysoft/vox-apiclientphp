<?php 
/*
 * Mannysoft
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 04/03/2015
 */

namespace Mannysoft\Models;

use JsonSerializable;

class CartItemModel implements JsonSerializable {
    /**
     * A cart item for DIDs
     * @param DidCartItemModel|null $didCartItem public property
     */
    protected $didCartItem;

    /**
     * A cart item for capacity
     * @param CapacityCartItemModel|null $capacityCartItem public property
     */
    protected $capacityCartItem;

    /**
     * A cart item for credit packages
     * @param CreditPackageCartItemModel|null $creditPackageCartItem public property
     */
    protected $creditPackageCartItem;

    /**
     * Constructor to set initial or default values of member properties
	 * @param   DidCartItemModel|null   $didCartItem             Initialization value for the property $this->didCartItem          
	 * @param   CapacityCartItemModel|null   $capacityCartItem        Initialization value for the property $this->capacityCartItem     
	 * @param   CreditPackageCartItemModel|null   $creditPackageCartItem   Initialization value for the property $this->creditPackageCartItem
     */
    public function __construct()
    {
        if(3 == func_num_args())
        {
            $this->didCartItem           = func_get_arg(0);
            $this->capacityCartItem      = func_get_arg(1);
            $this->creditPackageCartItem = func_get_arg(2);
        }
    }

    /**
     * Return a property of the response if it exists.
     * Possibilities include: code, raw_body, headers, body (if the response is json-decodable)
     * @return mixed
     */
    public function __get($property)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            $value = $this->$property;
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                return utf8_encode($value);
            }
            else {
                return $value;
            }
        }
    }
    
    /**
     * Set the properties of this object
     * @param string $property the property name
     * @param mixed $value the property value
     */
    public function __set($property, $value)
    {
        if (property_exists($this, $property)) {
            //UTF-8 is recommended for correct JSON serialization
            if (is_string($value) && mb_detect_encoding($value, "UTF-8", TRUE) != "UTF-8") {
                $this->$property = utf8_encode($value);
            }
            else {
                $this->$property = $value;
            }
        }

        return $this;
    }

    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['didCartItem']           = $this->didCartItem;
        $json['capacityCartItem']      = $this->capacityCartItem;
        $json['creditPackageCartItem'] = $this->creditPackageCartItem;
        return $json;
    }
}